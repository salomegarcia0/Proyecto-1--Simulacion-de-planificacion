/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz;

import java.util.concurrent.ThreadLocalRandom;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.BufferedReader;
import java.io.FileReader;
import main.CPU;
import Estructuras_de_Datos.*;
import Modelado_de_procesos.*;
import Politicas_de_Planificacion.*;
import javax.swing.JFrame;

/**
 *
 * @author pjroj
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        nombreArchivoCiclo = new javax.swing.JLabel();
        cargarArchivo = new javax.swing.JButton();
        inicio = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cargarArchivoCiclo = new javax.swing.JButton();
        nombreArchivo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jLabel3.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(253, 253, 253));
        jLabel3.setText("(Solo archivos de tipo .txt)");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(102, 0, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Agency FB", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("(Solo archivos de tipo .csv)");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 240, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Agency FB", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Nombre del archivo cargado CICLO:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        nombreArchivoCiclo.setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N
        nombreArchivoCiclo.setForeground(new java.awt.Color(51, 51, 51));
        nombreArchivoCiclo.setText("...");
        jPanel2.add(nombreArchivoCiclo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 300, 20));

        cargarArchivo.setBackground(new java.awt.Color(51, 0, 102));
        cargarArchivo.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        cargarArchivo.setForeground(new java.awt.Color(255, 255, 255));
        cargarArchivo.setText("Carga Archivo Proceso");
        cargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarArchivoActionPerformed(evt);
            }
        });
        jPanel2.add(cargarArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 50, 230, -1));

        inicio.setBackground(new java.awt.Color(51, 0, 102));
        inicio.setFont(new java.awt.Font("Agency FB", 1, 14)); // NOI18N
        inicio.setForeground(new java.awt.Color(255, 255, 255));
        inicio.setText("Iniciar programa");
        inicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicioActionPerformed(evt);
            }
        });
        jPanel2.add(inicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 190, 120, 30));

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Agency FB", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Nombre del archivo cargado PROCESOS:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        cargarArchivoCiclo.setBackground(new java.awt.Color(51, 0, 102));
        cargarArchivoCiclo.setFont(new java.awt.Font("Agency FB", 1, 24)); // NOI18N
        cargarArchivoCiclo.setForeground(new java.awt.Color(255, 255, 255));
        cargarArchivoCiclo.setText("Carga Archivo Ciclo");
        cargarArchivoCiclo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarArchivoCicloActionPerformed(evt);
            }
        });
        jPanel2.add(cargarArchivoCiclo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 150, 230, -1));

        nombreArchivo.setFont(new java.awt.Font("Agency FB", 0, 14)); // NOI18N
        nombreArchivo.setForeground(new java.awt.Color(51, 51, 51));
        nombreArchivo.setText("...");
        jPanel2.add(nombreArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 300, 20));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 550, 240));

        jLabel2.setFont(new java.awt.Font("Agency FB", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Carga tu archivo con los procesos");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 20, 610, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarArchivoActionPerformed
        //Para cargar el archivo de procesos
        JFileChooser file = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".csv", "csv");
        file.setFileFilter(filter);
        file.setAcceptAllFileFilterUsed(false);
        int result = file.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            CPU.setFile(file.getSelectedFile());
            nombreArchivo.setText(CPU.getFile().getName());
            JOptionPane.showMessageDialog(null, "Su archivo de procesos a sido cargado con exito");
        }
    }//GEN-LAST:event_cargarArchivoActionPerformed
    
    private boolean FileIsEmpty(){
        return CPU.getFile() == null;
    }
    private boolean FileCicloIsEmpty(){
        return CPU.getFileCiclo()== null;
    }
    
    private void inicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicioActionPerformed
        
        //valor del reloj inicial del programa 1 ciclo = 500ms
        //CPU.setCiclo_reloj(1000);      
        
        if (FileIsEmpty() || FileCicloIsEmpty()){
            //SE MUESTRA UN MENSAJE DE ERROR EN CASO DE QUE NO SE HAYA SELECCIONADO NINGUN ARCHIVO
            JOptionPane.showMessageDialog(null, "Debe seleccionar sus archivos primero");
        }else{
            //Se inicia el relojj global del sistema      
            long inicio = System.currentTimeMillis();
            CPU.setReloj_global(inicio);
        
            //CODIGO PARA LEERLO//
            String filePath = CPU.getFile().getAbsolutePath();
            String filePathCiclo = CPU.getFileCiclo().getAbsolutePath();
            //Se crea la cola inicial para cargar los procesos
            CPU.setColaNuevos(new Cola());
            //CPU.setColaGuardados(new Cola());
            //Cola colaprocesos = new Cola();
            
            try {
            //lee el ciclo
            BufferedReader brC = new BufferedReader(new FileReader(filePathCiclo));
            String lineaC;
            String separadorC = ",";
            int contC = 0;
            
            while ((lineaC = brC.readLine()) != null) {
                // con cont > 0 se evita leer la primera línea del archivo (encabezado)
                if (contC > 0){
                    // Dividir la línea por el separador y guardar los campos en un arreglo
                    CPU.setCiclo_reloj(Integer.parseInt(lineaC));
                    System.out.println(CPU.getCiclo_reloj());
                }
                contC += 1;
                                
            }
            
            brC.close();
            
            
            // Crear un objeto BufferedReader para leer el archivo proceso
            BufferedReader br = new BufferedReader(new FileReader(filePath));
            
            String linea;
            String separador = ",";
            int cont = 0;
            
            //para verificación durante la lectura
            boolean readingProcesos = true;
            // Leer las siguientes líneas del archivo (datos)
            while ((linea = br.readLine()) != null) {
                // con cont > 0 se evita leer la primera línea del archivo (encabezado)
                if (cont > 0){
                    // Dividir la línea por el separador y guardar los campos en un arreglo
                    String[] campos = linea.split(separador);
                    //Crear un objeto proceso con los campos leídos
                    int procesoID = ThreadLocalRandom.current().nextInt(111111, 999999); //esto debe ser un random                   
                    String procesoNombre = campos[0]; 
                    int instruccionesTotal = Integer.parseInt(campos[1]); 
                    
                    TipoProceso tipo = TipoProceso.CPU_BOUND;
                    
                    if (campos[2].equals("IO_BOUND")){
                        tipo = TipoProceso.IO_BOUND;
                    }

                    long tiempoCreacion = Long.parseLong(campos[3]);
                    //long tiempoServicio = Long.parseLong(campos[4]);
                    int memoria = Integer.parseInt(campos[4]);

                    PCB proceso = new PCB(procesoID,procesoNombre,instruccionesTotal,tipo,tiempoCreacion,memoria);
                    //PCB proceso2 = new PCB(procesoID,procesoNombre,instruccionesTotal,tipo,tiempoCreacion,memoria);
                    // Agregar el objeto Nodo(PCB) a la cola de procesos
                    //colaprocesos.enColar(proceso);
                    CPU.agregarProcesoNuevo(proceso);
                    //una copia de los datos actuales
                    //CPU.agregarProcesoNuevoGUARDADO(proceso2);
                }
                cont += 1;
                                
            }
            
            //se guarda la cola de procesos inicial en el global para su uso (sin ordenar ni nada
            //CPU.setColaNuevos(colaprocesos);
            //CPU.getColaNuevos().print();
            // Cerrar el objeto BufferedReader
            br.close();
            
            //se crean todas las colas iniciales
            CPU.setColaListos(new Cola());
            CPU.setColaListosSuspendidos(new Cola());
            CPU.setColaBloqueadosSuspendidos(new Cola());
            CPU.setColaBloqueados(new Cola());
            CPU.setColaTerminado(new Cola());
            CPU.setGestorMemoria(new GestorMemoria());
            
            CPU.getColaNuevos().print();
            
            VentanaPoliticas ventanaPoli = new VentanaPoliticas();
            ventanaPoli.setVisible(true);
            
            
            //Cola prueba = CPU.getInicial();
            //FCFS planificador = new FCFS();
            //planificador.planificacionFCFS();

            //Cargar la siguiente ventana,Ventana2 
//            Ventana2 ventana2 = new Ventana2();
//            ventana2.setVisible(true);
            this.dispose();
            
            } catch (Exception e) {
                // Mostrar por consola el mensaje de la excepción y una sugerencia general
                JOptionPane.showMessageDialog(null,"Error al leer el archivo: "+e.getMessage()+"\nVerifique que no haya espacios vacios o ',' extra   etc");
            }
            
        }
    }//GEN-LAST:event_inicioActionPerformed

    private void cargarArchivoCicloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarArchivoCicloActionPerformed
        //Para cargar el archivo con el valor del ciclo
        JFileChooser file = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".csv", "csv");
        file.setFileFilter(filter);
        file.setAcceptAllFileFilterUsed(false);
        int result = file.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            CPU.setFileCiclo(file.getSelectedFile());
            nombreArchivoCiclo.setText(CPU.getFileCiclo().getName());
            JOptionPane.showMessageDialog(null, "Su archivo con el valor ciclo a sido cargado con exito");
        }
    }//GEN-LAST:event_cargarArchivoCicloActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cargarArchivo;
    private javax.swing.JButton cargarArchivoCiclo;
    private javax.swing.JButton inicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel nombreArchivo;
    private javax.swing.JLabel nombreArchivoCiclo;
    // End of variables declaration//GEN-END:variables
}
